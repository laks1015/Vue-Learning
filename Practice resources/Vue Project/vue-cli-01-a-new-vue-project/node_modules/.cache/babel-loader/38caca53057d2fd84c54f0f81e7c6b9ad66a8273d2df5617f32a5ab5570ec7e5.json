{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"li\", null, [_createElementVNode(\"h2\", null, _toDisplayString($props.name) + \" \" + _toDisplayString($data.FriendIsFavorite ? '(Favorite!)' : ''), 1 /* TEXT */), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.toggleFavorite && $options.toggleFavorite(...args))\n  }, \"Toggle Favorite\"), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.toggleDetails && $options.toggleDetails(...args))\n  }, _toDisplayString($data.detailsAreVisible ? 'Hide' : 'Show') + \" Details\", 1 /* TEXT */)]), $data.detailsAreVisible ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_1, [_createElementVNode(\"li\", null, [_cache[2] || (_cache[2] = _createElementVNode(\"strong\", null, \"Phone:\", -1 /* HOISTED */)), _createTextVNode(\" \" + _toDisplayString($props.phoneNumber), 1 /* TEXT */)]), _createElementVNode(\"li\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"strong\", null, \"Email:\", -1 /* HOISTED */)), _createTextVNode(_toDisplayString($props.emailAddress), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["key","_createElementBlock","_Fragment","_createElementVNode","_toDisplayString","$props","name","$data","FriendIsFavorite","onClick","_cache","args","$options","toggleFavorite","toggleDetails","detailsAreVisible","_hoisted_1","_createTextVNode","phoneNumber","emailAddress","_createCommentVNode"],"sources":["/Users/lakshita/Desktop/Vue/Github/Vue-Learning/Practice resources/Vue Project/vue-cli-01-a-new-vue-project/src/components/FriendContact.vue"],"sourcesContent":["<!-- this is a component to display a friends contact component -->\n <template>\n    <li>\n        <h2>{{ name }} {{ FriendIsFavorite ? '(Favorite!)' : '' }}</h2>\n        <button @click=\"toggleFavorite\">Toggle Favorite</button>\n\n        <button @click=\"toggleDetails\">{{ detailsAreVisible ? 'Hide' : 'Show' }} Details</button>\n\n\n    </li>\n\n    <ul v-if=\"detailsAreVisible\">\n        <li><strong>Phone:</strong> {{ phoneNumber }}</li>\n        <li><strong>Email:</strong>{{ emailAddress}}</li>\n    </ul>\n    \n </template>\n\n <script>\n\nexport default {\n    // config options for this specific component\n    // props:['name', \n    // 'phoneNumber',\n    // 'emailAddress',\n    // 'isFavorite'\n    // ], // this is where you define the properties that this component expects to receive from the outside\n    // // we suse camelcase so that it can be used as a variable \n\n    //because props can get complex, we have a look at passing it as an object vs an array\n    props:{\n        id:{\n            type: String,\n            required: true\n        },\n        name: {\n            type: String,\n            required: true\n        },\n        phoneNumber: {\n            type: String,\n            required: true\n        },\n        emailAddress: {\n            type: String,\n            required: true\n        },\n        isFavorite: {\n            type: Boolean,\n            required: false,\n            //defau;lt value if somehing is not rquired\n            default: false, \n            // validator(value){\n            //     return value === '0' || value === '1';\n            // } //this is a custom validator to make sure that the value is either 0 or 1\n        },\n        \n    }, \n    data(){\n        // this data is independent of the data in the parent component (vue app component)\n        return{\n            detailsAreVisible: false,\n\n            // can gt rid of fummy friend contact because we dynamically loop thoruhg eeach friend in App\n            // friend:\n            // {\n            //     id: 'manuel',\n            //         name: 'Manuel Lorenz',\n            //         phone: '01234 5678 991',\n            //         email: 'manuel@localhost.com'\n            // },\n            FriendIsFavorite: this.isFavorite, \n            // here we jsut took the value from Parent prop called isFriednFavorite and assigned its passed down value to a new value in the child compoentn nad now because that  value is techincally 'defined' as a variable in child compoennt\n            // it can b used legally in the child compoennt file and in fucntions that are defined in the child compoennt file\n        }\n    },\n    methods: {\n        toggleDetails(){\n            this.detailsAreVisible = !this.detailsAreVisible;\n        },\n        // this is a mujtatin \n        // mutation occurs when datta is not changed directly, but through a function yhat is the child of the component that has the og function\n        // in this case: isFavoirite is defined as a prop value in App.vue. and now FrinndContact is a child componnt an dwants to MPODIFY that value. through a function but it cannot\n        // it can only read the valiue but not create a new funciton that alters the value that was passed down to it from Parent Vue compoennt.\n        // toggleFavorite(){\n        //     if(isFavorite === '1'){\n        //         isFavorite = '0';\n        //     }else{  \n        //         isFavorite = '1';\n        //     }\n        // }\n\n        // this is a better way to do it\n        // (there is a way where the child compoent asks the parent compoent to update somethng, the parent updates it in their file (appvvue0 adn then REpasses it don to child compoent in the way that they want it ))\n\n        // the other ay is to take the data passed from parent as the inntial data, change it in friend (child) compeont but then make sure that we are aware that it only hanges there and does not affect the intial dat in the paretn\n\n        toggleFavorite(){\n            console.log(this.FriendIsFavorite);\n\n            // this.FriendIsFavorite = !this.FriendIsFavorite;\n            // this allows you to ccreate your own custom vent that you can emit to the parent compoennt\n            // this is how you can pass data from child to parent\n\n            // name of custom event i the first parameteer in camelcase\n            // the second parameter is the data that you want to pass to the parent compoennt\n            this.$emit('toggle-favorite', this.id);\n            // this means that the tiggl-favorite event ill pass this.ud as a proeprty to whoever (the [arent] that is listening. so the lsitener can use the val)\n        }\n\n    }\n};\n </script>\n "],"mappings":";;EAAAA,GAAA;AAAA;;uBAAAC,mBAAA,CAAAC,SAAA,SAEIC,mBAAA,CAOK,aANDA,mBAAA,CAA+D,YAAAC,gBAAA,CAAxDC,MAAA,CAAAC,IAAI,IAAG,GAAC,GAAAF,gBAAA,CAAGG,KAAA,CAAAC,gBAAgB,uCAClCL,mBAAA,CAAwD;IAA/CM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,cAAA,IAAAD,QAAA,CAAAC,cAAA,IAAAF,IAAA,CAAc;KAAE,iBAAe,GAE/CR,mBAAA,CAAyF;IAAhFM,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAE,aAAA,IAAAF,QAAA,CAAAE,aAAA,IAAAH,IAAA,CAAa;sBAAKJ,KAAA,CAAAQ,iBAAiB,sBAAqB,UAAQ,gB,GAK1ER,KAAA,CAAAQ,iBAAiB,I,cAA3Bd,mBAAA,CAGK,MAdTe,UAAA,GAYQb,mBAAA,CAAkD,a,0BAA9CA,mBAAA,CAAuB,gBAAf,QAAM,sBAZ1Bc,gBAAA,CAYmC,GAAC,GAAAb,gBAAA,CAAGC,MAAA,CAAAa,WAAW,iB,GAC1Cf,mBAAA,CAAiD,a,0BAA7CA,mBAAA,CAAuB,gBAAf,QAAM,sBAb1Bc,gBAAA,CAAAb,gBAAA,CAasCC,MAAA,CAAAc,YAAY,iB,OAblDC,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}